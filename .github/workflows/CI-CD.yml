name: FreeStyle Final Project CI-CD

on:
  #push:
    #branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Prod'
        type: choice
        options:
          - Prod

env:
  AWS_REGION: "eu-west-1"
  ECR_REPOSITORY: "freestyle"
  APP_NAME: "freestyle-api"
  EKS_CLUSTER_NAME: "Freestyle"
  EKS_NAMESPACE: ${{ secrets.EKS_NAMESPACE || 'freestyle' }}
  #SPLUNK_URL: ${{ secrets.SPLUNK_URL }}
  #SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}
  #SPLUNK_INDEX: ${{ secrets.SPLUNK_INDEX }}
  #ENVIRONMENT: splunk

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: ENV
    env:
      TESTING_URL: "http://localhost:4500/login"
    name: "Test image before pushing"

    steps:
      - name: Checkout repository 📂
        uses: actions/checkout@v4

      - name: Create .env file from secrets
        run: |
          echo "🔧 Creating environment file..."
          echo "${{ secrets.AWS_PRODUCTION }}" > .env
          echo "✅ Environment file created successfully!"

      # change the DATABASE in .env for the containers
      - name: Change DATABASE Url 
        run: sed -i 's|^DATABASE *=.*|DATABASE="mongodb://test-mongo:27017/Final-Course-Project"|' .env

      - name: Build image
        run: docker build -t test-local .

      - name: Create docker network
        run: docker network create test-net || true

      - name: Run mongo container
        run: |
          docker run -d \
          --name test-mongo \
          --network test-net \
          mongo:6

      - name: Run backend container
        run: |
          docker run -d \
          --name test-backend \
          --network test-net \
          -p 4500:4500 \
          test-local


      - name: Initialize mongoDB
        run: | 
          for i in {1..10}; do
            if docker logs test-backend 2>&1 | grep -q "Connected to Mongo"; then
              echo "✅ Backend successfully connected to Mongo... Initializing data"
              curl http://localhost:4500/initialize
              exit 0
            fi
            echo "⏳ Waiting for backend to connect to Mongo..."
            sleep 2
          done
          echo "❌ Backend failed to connect to Mongo"
          docker logs test-backend
          exit 1


      - name: Check if backend container failed
        run: |
          sleep 10
          if docker ps | grep test-backend &>/dev/null; then
            echo "Backend container is still running"
          else
            echo "Backend failed... trying to restart it"
            docker restart test-backend
            sleep 10

            for i in {1..10}; do
              if docker logs test-backend 2>&1 | grep -q "Connected to Mongo"; then
                echo "✅ Backend successfully connected to Mongo!"
                exit 0
              fi
              echo "⏳ Waiting for backend to connect to Mongo..."
              sleep 3
            done
          
            echo "❌ Backend failed to connect to Mongo"
            docker logs test-backend
            exit 1
          fi
          
            

      - name: Run login API tests
        run: |
          echo "Starting login API tests..."
          ./testing/loginRouterTesting.sh "$TESTING_URL" '${{ secrets.MONGO_TEST_USER }}'



  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: ENV
    name: "🎯 Build Image on runner"

    outputs:
      image_tag: ${{ steps.generate-tag.outputs.UNIQUE_TAG }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout repository 📂
        uses: actions/checkout@v4

      - name: Configure AWS credentials 🔐
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::017923816312:role/GithubActionsAvivLevyDeployRole

      - name: Login to Amazon ECR 🔑
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env file from secrets
        run: |
          echo "🔧 Creating environment file..."
          echo "${{ secrets.AWS_PRODUCTION }}" > .env
          echo "✅ Environment file created successfully!"

      - name: Generate Tag
        id: generate-tag
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "UNIQUE_TAG=${{ env.APP_NAME }}-${BUILD_NUMBER}-${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image 🏗️
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          UNIQUE_TAG: ${{ steps.generate-tag.outputs.UNIQUE_TAG }}
        run: |
          echo "🔨 Starting Docker build..."
          echo "🔍 Build triggered by: ${{ github.event_name }}"
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$UNIQUE_TAG .
          echo "⬆️ Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$UNIQUE_TAG
          echo "✅ Image pushed successfully with tag: $UNIQUE_TAG"


# Deploy image to eks
  Deploy-to-eks:
    runs-on: ubuntu-latest
    environment: ENV
    name: "🎯 Deploy image to eks"
    needs: build-and-push

    steps:

      # For the testing/
      - name: Checkout repository 📂
        uses: actions/checkout@v4

      - name: Configure AWS credentials 🔐
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::017923816312:role/GithubActionsAvivLevyDeployRole

      - name: Setup kubectl & auth to EKS 🧩
        run: |
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"
          kubectl version --client=true

      - name: Ensure namespace exists 🧱
        run: |
          kubectl get ns "$EKS_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$EKS_NAMESPACE"

# Deployment file configuration
      - name: Render Kubernetes manifests 📄
        env:
          IMAGE: ${{ needs.build-and-push.outputs.ecr_registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}
        run: |
          cat > k8s.yaml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${APP_NAME}
            namespace: ${EKS_NAMESPACE}
            labels:
              app: ${APP_NAME}
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: ${APP_NAME}
            template:
              metadata:
                labels:
                  app: ${APP_NAME}
              spec:
                containers:
                  - name: ${APP_NAME}
                    image: ${IMAGE}
                    imagePullPolicy: Always
                    ports:
                      - containerPort: 4500
                    resources:
                      requests:
                        cpu: "100m"
                        memory: "128Mi"
                      limits:
                        cpu: "500m"
                        memory: "512Mi"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}
            namespace: ${EKS_NAMESPACE}
            labels:
              app: ${APP_NAME}
          spec:
            type: LoadBalancer
            selector:
              app: ${APP_NAME}
            ports:
              - name: http
                port: 80
                targetPort: 4500
          EOF


# apply the deploy
      - name: Apply manifests 🚀
        run: |
          kubectl apply -f k8s.yaml

      - name: Wait for rollout ⏱️
        run: |
          kubectl rollout status deploy/${APP_NAME} -n ${EKS_NAMESPACE} --timeout=300s
          echo "Deployed image:"
          echo "${{ needs.build-and-push.outputs.ecr_registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}"

      - name: Show service endpoint 🌐
        run: |
          kubectl get svc ${APP_NAME} -n ${EKS_NAMESPACE} -o wide
          echo -n "LB hostname: "
          kubectl get svc ${APP_NAME} -n ${EKS_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || true
          echo

      - name: Wait for LoadBalancer and run login API tests 🌐
        run: |
          echo "Waiting for LoadBalancer hostname..."
          for i in {1..10}; do
            LB_HOST=$(kubectl get svc ${APP_NAME} -n ${EKS_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || true)
            if [ -n "$LB_HOST" ]; then
              echo "✅ LoadBalancer is ready: $LB_HOST"

              curl http://$LB_HOST/test
              
              echo "Running login API tests against LoadBalancer..."
              ./testing/loginRouterTesting.sh "http://$LB_HOST/login" '${{ secrets.MONGO_TEST_USER }}'
              
            fi
            echo "⏳ LoadBalancer not ready yet, retrying... ($i/30)"
            sleep 10
          done
          echo "❌ LoadBalancer did not get an external hostname in time"
          exit 1

      - name: Diagnostics on failure 🧪
        if: failure()
        run: |
            echo "=== Pods ==="
            kubectl get pods -n ${EKS_NAMESPACE} -o wide
            echo "=== Describe deployment ==="
            kubectl describe deploy/${APP_NAME} -n ${EKS_NAMESPACE} || true
            echo "=== Events ==="
            kubectl get events -n ${EKS_NAMESPACE} --sort-by=.lastTimestamp | tail -n 100 || true
            echo "=== Pod logs (first pod) ==="
            P=$(kubectl get pods -n ${EKS_NAMESPACE} -l app=${APP_NAME} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [ -n "$P" ]; then kubectl logs -n ${EKS_NAMESPACE} "$P" --tail=200 || true; fi

name: FreeStyle Final Project CI-CD

on:
  #push:
    #branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Prod'
        type: choice
        options:
          - Prod

env:
  AWS_REGION: "eu-west-1"
  ECR_REPOSITORY: "freestyle"
  APP_NAME: "freestyle-api"
  EKS_CLUSTER_NAME: "Freestyle"
  EKS_NAMESPACE: ${{ secrets.EKS_NAMESPACE || 'freestyle' }}
  #SPLUNK_URL: ${{ secrets.SPLUNK_URL }}
  #SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}
  #SPLUNK_INDEX: ${{ secrets.SPLUNK_INDEX }}
  #ENVIRONMENT: splunk

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: ENV
    name: "🎯 Build Image on runner"

    outputs:
      image_tag: ${{ steps.generate-tag.outputs.UNIQUE_TAG }}
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout repository 📂
        uses: actions/checkout@v4

      - name: Configure AWS credentials 🔐
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::017923816312:role/GithubActionsAvivLevyDeployRole

      - name: Login to Amazon ECR 🔑
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create .env file from secrets
        run: |
          echo "🔧 Creating environment file..."
          echo "${{ secrets.AWS_PRODUCTION }}" > .env
          echo "✅ Environment file created successfully!"

      - name: Generate Tag
        id: generate-tag
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "UNIQUE_TAG=${{ env.APP_NAME }}-${BUILD_NUMBER}-${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image 🏗️
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          UNIQUE_TAG: ${{ steps.generate-tag.outputs.UNIQUE_TAG }}
        run: |
          echo "🔨 Starting Docker build..."
          echo "🔍 Build triggered by: ${{ github.event_name }}"
          docker build \
            -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$UNIQUE_TAG \
            -t "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest" \
            .
          echo "⬆️ Pushing image with unique tag to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$UNIQUE_TAG

          echo "⬆️ Pushing latest tag (moves latest to this image)..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          
          echo "✅ Image pushed successfully with tag: $UNIQUE_TAG"

# Deploy image to eks
  Deploy-to-eks:
    runs-on: ubuntu-latest
    name: "🎯 Deploy image to eks"
    needs: build-and-push

    steps:
      - name: Configure AWS credentials 🔐
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::017923816312:role/GithubActionsAvivLevyDeployRole

      - name: Setup kubectl & auth to EKS 🧩
        run: |
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"
          kubectl version --client=true

      - name: Ensure namespace exists 🧱
        run: |
          kubectl get ns "$EKS_NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$EKS_NAMESPACE"

# Deployment file configuration
      - name: Render Kubernetes manifests 📄
        env:
          IMAGE: ${{ needs.build-and-push.outputs.ecr_registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}
        run: |
          cat > k8s.yaml <<EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}
            namespace: ${EKS_NAMESPACE}
            labels:
              app: ${APP_NAME}
          spec:
            type: LoadBalancer
            selector:
              app: ${APP_NAME}
            ports:
              - name: http
                port: 80
                targetPort: 4500
          EOF


# apply the deploy

      - name: Apply manifests 🚀
        run: |
          kubectl apply -f Kubernetes/Deployment.yml

      - name: Apply manifests 🚀
        run: |
          kubectl apply -f k8s.yaml

      - name: Wait for rollout ⏱️
        run: |
          kubectl rollout status deploy/${APP_NAME} -n ${EKS_NAMESPACE} --timeout=300s
          echo "Deployed image:"
          echo "${{ needs.build-and-push.outputs.ecr_registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}"

      - name: Show service endpoint 🌐
        run: |
          kubectl get svc ${APP_NAME} -n ${EKS_NAMESPACE} -o wide
          echo -n "LB hostname: "
          kubectl get svc ${APP_NAME} -n ${EKS_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || true
          echo

      - name: Diagnostics on failure 🧪
        if: failure()
        run: |
            echo "=== Pods ==="
            kubectl get pods -n ${EKS_NAMESPACE} -o wide
            echo "=== Describe deployment ==="
            kubectl describe deploy/${APP_NAME} -n ${EKS_NAMESPACE} || true
            echo "=== Events ==="
            kubectl get events -n ${EKS_NAMESPACE} --sort-by=.lastTimestamp | tail -n 100 || true
            echo "=== Pod logs (first pod) ==="
            P=$(kubectl get pods -n ${EKS_NAMESPACE} -l app=${APP_NAME} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
            if [ -n "$P" ]; then kubectl logs -n ${EKS_NAMESPACE} "$P" --tail=200 || true; fi
